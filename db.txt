mysql -u root --default-character-set=utf8

create table member
(
username varchar(30) primary key not null,
name varchar(20),
nickname varchar(20),
password varchar(15) not null,
profileimgname varchar(30),
intro text,
state enum('all', 'follow')
);


delimiter //

create trigger deletemember before delete on member
for each row
begin
delete from article where username=old.username;
delete from follower where username=old.username or follower=old.username;
delete from following where username=old.username or following=old.username;
delete from atclike where username=old.username;
delete from reply where username=old.username;
delete from history where username=old.username or who=old.username;
end//

delimiter ;


create table article
(
atcnum int not null primary key auto_increment,
username varchar(25) not null,
content text,
registerday datetime default current_timestamp,
foreign key(username) references member(username)
);

create table media
(
medianum int not null auto_increment,
atcnum int not null,
medianame varchar(50) not null,
mediatype varchar(10),
primary key(medianum, atcnum),
foreign key(atcnum) references article(atcnum)
);

create table hashtag
(
atcnum int not null,
hashtag varchar(10) not null,
foreign key(atcnum) references article(atcnum)
);

create table atclike
(
atcnum int not null,
username varchar(25) not null,
primary key(atcnum, username),
foreign key(atcnum) references article(atcnum),
foreign key(username) references member(username)
);

create table reply
(
replynum int not null primary key auto_increment,
atcnum int not null,
username varchar(25) not null,
content text,
foreign key(atcnum) references article(atcnum),
foreign key(username) references member(username)
);


게시물 트리거
delimiter //

create trigger updatepost before update on article
for each row
begin
delete from hashtag where atcnum=old.atcnum;
end//

create trigger deletepost before delete on article
for each row
begin
delete from media where atcnum=old.atcnum;
delete from hashtag where atcnum=old.atcnum;
delete from atclike where atcnum=old.atcnum;
delete from reply where atcnum=old.atcnum;
delete from history where atcnum=old.atcnum;
end//

create trigger clicklike after insert on atclike
for each row
begin
select username into @username from article where atcnum=new.atcnum;
if @username != new.username
then
insert into history(username, who, type, atcnum) values(@username, new.username, 'atclike', new.atcnum);
end if;
end//

create trigger clicknotlike before delete on atclike
for each row
begin
delete from history where who=old.username and type='atclike' and atcnum=old.atcnum;
end//

create trigger deletereply before delete on reply
for each row
begin
delete from history where replynum=old.replynum;
end//

delimiter ;



create table follower
(
username varchar(25) not null,
follower varchar(25) not null,
primary key(username, follower),
foreign key(username) references member(username)
);

create table following
(
username varchar(25) not null,
following varchar(25) not null,
primary key(username, following),
foreign key(username) references member(username)
);


팔로우 트리거
delimiter //

create trigger addfollow after insert on follower
for each row
begin
insert into following(username, following) values(new.follower, new.username);
insert into history(username, who, type) values(new.follower, new.username, 'follow');
end//

create trigger removefollow after delete on follower
for each row
begin
delete from following where username=old.follower and following=old.username;
delete from history where username=old.follower and who=old.username;
end//

delimiter ;

insert into follower(memid, followid) values('zzz0711@naver.com', '01055551234');

delete from follower where memid='prosonic1@naver.com' and followid='01021020330';

create table history
(
hisnum int not null auto_increment,
username varchar(25) not null,
who varchar(25),
type enum('atclike', 'follow', 'call', 'reply'),
atcnum int,
replynum int,
content text,
updateday datetime default current_timestamp,
`read` tinyint(1) not null default 0,
primary key(hisnum, username),
foreign key(username) references member(username),
foreign key(who) references member(username),
foreign key(atcnum) references article(atcnum),
foreign key(replynum) references reply(replynum)
);

select y.*, media.medianame, media.mediatype from
(select x.*, member.nickname, member.profileimgname from
(select * from history where username='test1@naver.com' order by hisnum desc limit 20)x
join member on x.who=member.username)y
left join media on y.atcnum=media.atcnum group by y.hisnum order by null;
